<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>凸优化</title>
    <url>/2020/12/06/convex_optimization/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>$$ min \ f_{0}(x) $$<br>$$ subject \ to \ f_{i}(x) \leqslant b_{i} \ i=1,…,m $$</p>
<ul>
<li>目标函数和限制函数都是凸的，即<br>$$ f_{i}(\alpha x + \beta y) \leqslant \alpha f_{i}(x) + \beta f_{i}(y) \ \alpha + \beta = 1, \alpha \geq 0, \beta \geq 0 $$</li>
<li>最小二乘问题和线性规划问题都是凸优化问题的特例</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>没有解析解</li>
<li>但是有可靠和高效的求解算法</li>
<li>计算时间复杂度大体上和$max{n^{3}, n^{2}m, F}$成正比，其中$F$是计算$f_{i}$和它的一阶导，二阶导的开销</li>
</ol>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol>
<li>每一个局部最优解都是全局最优解</li>
<li>最优解集合是凸的</li>
<li>如果目标函数是严格凸的，那么这个优化问题就最多只有一个最优解</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>一般不容易分析出问题的凸优化形式</li>
<li>需要很多技巧才能将问题转换成凸优化问题</li>
<li>会对很多问题能够凸优化求解感到惊奇</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li>Standford Boyd, Convex Optimization course, <a href="https://web.stanford.edu/~boyd/cvxbook/">https://web.stanford.edu/~boyd/cvxbook/</a></li>
<li>Standford Boyd, Convex Optimization <a href="/2020/12/06/convex_optimization/bv_cvxslides.pdf">slides</a></li>
</ol>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>convex optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h2 id="Use-Mathjax"><a href="#Use-Mathjax" class="headerlink" title="Use Mathjax"></a>Use Mathjax</h2><h3 id="Open-the-switch"><a href="#Open-the-switch" class="headerlink" title="Open the switch"></a>Open the switch</h3><p>add <code>mathjax: true</code> to the page title</p>
<h3 id="Use-math-in-Latex-format-such-as"><a href="#Use-math-in-Latex-format-such-as" class="headerlink" title="Use math in Latex format, such as:"></a>Use math in Latex format, such as:</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span>x = &#123;-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2-4ac&#125; <span class="keyword">\over</span> 2a&#125;.<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>rendered as:</p>
<p>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p>
<h2 id="Use-Pdf"><a href="#Use-Pdf" class="headerlink" title="Use Pdf"></a>Use Pdf</h2><h3 id="Open-the-switch-1"><a href="#Open-the-switch-1" class="headerlink" title="Open the switch"></a>Open the switch</h3><p>add <code>pdf: true</code> to the page title</p>
<h3 id="Use-pdf-in-the-following-way"><a href="#Use-pdf-in-the-following-way" class="headerlink" title="Use pdf in the following way:"></a>Use pdf in the following way:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% pdf &#x2F;path&#x2F;to&#x2F;your&#x2F;file.pdf %&#125;</span><br></pre></td></tr></table></figure>

<p>rendered as:</p>
<div class="pdfobject-container" data-target="/resources/test.pdf" data-height="500px"></div>

<h3 id="others"><a href="#others" class="headerlink" title="others"></a>others</h3><p>google doc and slideshare is also supported.</p>
<h2 id="Add-globe-statistics"><a href="#Add-globe-statistics" class="headerlink" title="Add globe statistics"></a>Add globe statistics</h2><h3 id="Get-a-globe-code-from-REVxLVERMAPS"><a href="#Get-a-globe-code-from-REVxLVERMAPS" class="headerlink" title="Get a globe code from REVxLVERMAPS"></a>Get a globe code from REVxLVERMAPS</h3><p><a href="https://www.revolvermaps.com/?target=gallery">https://www.revolvermaps.com/?target=gallery</a></p>
<h3 id="Add-the-code-to-your-website"><a href="#Add-the-code-to-your-website" class="headerlink" title="Add the code to your website"></a>Add the code to your website</h3><p>If you are using Next, you can add it to: <code>layout/_macro/sidebar.swig</code></p>
<h2 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing.."></a>One more thing..</h2><h3 id="Add-a-code-block"><a href="#Add-a-code-block" class="headerlink" title="Add a code block"></a>Add a code block</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>优化问题</title>
    <url>/2020/12/07/optimization_problem/</url>
    <content><![CDATA[<p>我们工作生活中的很多问题都是优化问题。在本文中，我们给出几个典型的例子，并尝试使用现有的求解器进行求解，作为参照。在后续文章中，我们将介绍一些启发式算法，并对本文中的问题进行求解。</p>
<h2 id="问题1-离散空间优化问题"><a href="#问题1-离散空间优化问题" class="headerlink" title="问题1: 离散空间优化问题"></a>问题1: 离散空间优化问题</h2><h3 id="luogu-P1048-采药"><a href="#luogu-P1048-采药" class="headerlink" title="luogu P1048 采药"></a><a href="https://www.luogu.com.cn/problem/P1048">luogu P1048 采药</a></h3><blockquote>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p>
<p>如果你是辰辰，你能完成这个任务吗？</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行有 $2$ 个整数 $T$（$1 \le T \le 1000, \ 1 \le T \le 000$）和 $M$（$1 \le M \le 100, \ 1 \le M \le 100$），用一个空格隔开，$T$ 代表总共能够用来采药的时间，$M$ 代表山洞里的草药的数目。</p>
<p>接下来的 $M$ 行每行包括两个在 $1$ 到 $100$ 之间（包括 $1$ 和 $100$）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出在规定的时间内可以采到的草药的最大总价值。</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">70 3</span><br><span class="line">71 100</span><br><span class="line">69 1</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure>

<h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul>
<li>对于 30% 的数据，$M \le 10$</li>
<li>对于全部的数据，$M \le 100$</li>
</ul>
</blockquote>
<p>这是一个典型的0/1背包问题，我们用$x_{i}$表示第$i$种草药采集与否，用$t_{i}$表示采集第$i$种草药所需要的时间，用$m_{i}$表示第$i$种草药的价值，我们的目标是在有限的时间$T$内使采集到的草药价值最大，那么我们就会得到如下的形式化表述:<br>$$\begin{equation}\label{eq1}<br>\begin{aligned}<br>max \ \sum_{i = 1}^{M} x_{i}m_{i} &amp;           \\<br>x_{i}(x_{i}-1) = 0, i \in [1, M]               \\<br>0 \le \sum_{i = 1}^{M}{x_{i}t_{i} \le T}         \\<br>\end{aligned}<br>\end{equation}$$</p>
<p>上面公式中的$x_{i}(x_{i-1})=0$是为了确保$x_{i}$只能取0和1。针对这个问题，我们使用如下的程序进行求解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> SR1</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> NonlinearConstraint</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> LinearConstraint</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rosen</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;The Rosenbrock function&quot;&quot;&quot;</span></span><br><span class="line">        m = [<span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>]  <span class="comment"># values</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">            total = x[i] * m[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -total</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the constraints</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cons_f</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [i * (i - <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cons_J</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [[<span class="number">2</span> * x[<span class="number">0</span>] - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">2</span> * x[<span class="number">1</span>] - <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span> * x[<span class="number">2</span>] - <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cons_H</span>(<span class="params">x, v</span>):</span></span><br><span class="line">        <span class="keyword">return</span> v[<span class="number">0</span>] * np.array(</span><br><span class="line">            [[<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]) + v[<span class="number">1</span>] * np.array([</span><br><span class="line">                [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">            ]) + v[<span class="number">2</span>] * np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line">    nonlinear_constraint = NonlinearConstraint(cons_f, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                                               jac=cons_J,</span><br><span class="line">                                               hess=cons_H)</span><br><span class="line"></span><br><span class="line">    linear_constraint = LinearConstraint([[<span class="number">71</span>, <span class="number">69</span>, <span class="number">1</span>]], [<span class="number">0</span>], [<span class="number">70</span>])</span><br><span class="line"></span><br><span class="line">    x0 = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    res = minimize(rosen,</span><br><span class="line">                   x0,</span><br><span class="line">                   method=<span class="string">&#x27;trust-constr&#x27;</span>,</span><br><span class="line">                   jac=<span class="string">&quot;2-point&quot;</span>,</span><br><span class="line">                   hess=SR1(),</span><br><span class="line">                   constraints=[nonlinear_constraint, linear_constraint],</span><br><span class="line">                   options=&#123;<span class="string">&#x27;verbose&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solve()</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">barrier_parameter: 2.048000000000001e-09</span><br><span class="line">barrier_tolerance: 2.048000000000001e-09</span><br><span class="line">         cg_niter: 0</span><br><span class="line">     cg_stop_cond: 1</span><br><span class="line">           constr: [array([-0.0073379 ,  0.00693036,  0.0001018 ]), array([70.00010182])]</span><br><span class="line">      constr_nfev: [106, 0]</span><br><span class="line">      constr_nhev: [82, 0]</span><br><span class="line">      constr_njev: [79, 0]</span><br><span class="line">   constr_penalty: 1.0</span><br><span class="line"> constr_violation: 0.0073378956828978265</span><br><span class="line">   execution_time: 0.149078369140625</span><br><span class="line">              fun: 0.00020358301622653028</span><br><span class="line">             grad: array([ 0., -0., -2.])</span><br><span class="line">              jac: [array([[ 0.98521491,  0.        ,  0.        ],</span><br><span class="line">      [ 0.        , -1.01376596,  0.        ],</span><br><span class="line">      [ 0.        ,  0.        , -1.00020358]]), array([[71, 69,  1]])]</span><br><span class="line">  lagrangian_grad: array([-7.48012763e-15, -1.15411153e-14, -2.22470154e-15])</span><br><span class="line">          message: &#39;&#96;xtol&#96; termination condition is satisfied.&#39;</span><br><span class="line">           method: &#39;tr_interior_point&#39;</span><br><span class="line">             nfev: 424</span><br><span class="line">             nhev: 0</span><br><span class="line">              nit: 188</span><br><span class="line">            niter: 188</span><br><span class="line">             njev: 106</span><br><span class="line">       optimality: 1.1541115285673698e-14</span><br><span class="line">           status: 2</span><br><span class="line">          success: True</span><br><span class="line">        tr_radius: 1.0000000000000005e-09</span><br><span class="line">                v: [array([-0.01465935,  0.01384519, -1.99938954]), array([0.00020342])]</span><br><span class="line">                x: array([ 9.92607455e-01, -6.88298061e-03, -1.01791508e-04])</span><br></pre></td></tr></table></figure>
<p>可以看到使用这个求解器并没有得到正确的结果，上面提到的二值约束对这个求解器不是很友好，求解的结果也不满足约束条件。</p>
<h2 id="问题2-连续空间多变量多约束非线性规划问题"><a href="#问题2-连续空间多变量多约束非线性规划问题" class="headerlink" title="问题2: 连续空间多变量多约束非线性规划问题"></a>问题2: 连续空间多变量多约束非线性规划问题</h2><p>$$min \ f(x) = e^{x_{1}}(4x_{1}^{2}+2x_{2}^{2}+4x_{1}x_{2}+2x_{2}+1)$$</p>
<p>$$\begin{equation}\label{eq2}<br>\begin{aligned}<br>1.5 + x_{1}x_{2} -x_{1} - x_{2} &amp;\leq 0          \\<br>-x_{1}x_{2} &amp;\leq 10                           \\<br>-10 \leq x_{1} &amp;\leq 10                       \\<br>-6  \leq x_{2} &amp;\leq 6                        \\<br>\end{aligned}<br>\end{equation}$$</p>
<p>我们先来看一下函数图像，基本上$x, y$越小，函数的值越小。<br><img src="/2020/12/07/optimization_problem/issue2.png" alt="Fig1. 函数图像"><span class="image-caption">Fig1. 函数图像</span></p>
<p>我们使用下面的程序对这个问题进行求解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> Bounds</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> SR1</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> NonlinearConstraint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.exp(x) * (<span class="number">4</span> * x * x + <span class="number">2</span> * y * y + <span class="number">4</span> * x * y + <span class="number">2</span> * y + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    x = np.linspace(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">    y = np.linspace(-<span class="number">6</span>, <span class="number">6</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    X, Y = np.meshgrid(x, y)</span><br><span class="line">    Z = f(X, Y)</span><br><span class="line"></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = plt.axes(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">    ax.plot_surface(X, Y, Z, cmap=<span class="string">&#x27;rainbow&#x27;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    ax.set_zlabel(<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line">    plt.tight_layout()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rosen</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;The Rosenbrock function&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> math.exp(x[<span class="number">0</span>]) * (<span class="number">4</span> * x[<span class="number">0</span>] * x[<span class="number">0</span>] + <span class="number">2</span> * x[<span class="number">1</span>] * x[<span class="number">1</span>] +</span><br><span class="line">                                 <span class="number">4</span> * x[<span class="number">0</span>] * x[<span class="number">1</span>] + <span class="number">2</span> * x[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the bound</span></span><br><span class="line">    bounds = Bounds([-<span class="number">10.0</span>, -<span class="number">6.0</span>], [<span class="number">10.0</span>, <span class="number">6.0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the constraints</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cons_f</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1.5</span> + x[<span class="number">0</span>] * x[<span class="number">1</span>] - x[<span class="number">0</span>] - x[<span class="number">1</span>], -x[<span class="number">0</span>] * x[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cons_J</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [[x[<span class="number">1</span>] - <span class="number">1</span>, x[<span class="number">0</span>] - <span class="number">1</span>], [-<span class="number">1</span>, -<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cons_H</span>(<span class="params">x, v</span>):</span></span><br><span class="line">        <span class="keyword">return</span> v[<span class="number">0</span>] * np.array([[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>]]) + v[<span class="number">1</span>] * np.array([[<span class="number">0</span>, -<span class="number">1</span>],</span><br><span class="line">                                                                    [-<span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">    nonlinear_constraint = NonlinearConstraint(cons_f, [-np.inf, -np.inf],</span><br><span class="line">                                               [<span class="number">0</span>, <span class="number">10</span>],</span><br><span class="line">                                               jac=cons_J,</span><br><span class="line">                                               hess=cons_H)</span><br><span class="line"></span><br><span class="line">    x0 = [<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">    res = minimize(rosen,</span><br><span class="line">                   x0,</span><br><span class="line">                   method=<span class="string">&#x27;trust-constr&#x27;</span>,</span><br><span class="line">                   jac=<span class="string">&quot;2-point&quot;</span>,</span><br><span class="line">                   hess=SR1(),</span><br><span class="line">                   constraints=[nonlinear_constraint],</span><br><span class="line">                   options=&#123;<span class="string">&#x27;verbose&#x27;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">                   bounds=bounds)</span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    plot()</span><br><span class="line">    solve()</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">barrier_parameter: 3.200000000000001e-05</span><br><span class="line">barrier_tolerance: 3.200000000000001e-05</span><br><span class="line">         cg_niter: 999</span><br><span class="line">     cg_stop_cond: 2</span><br><span class="line">           constr: [array([-1.21157086,  9.59702226]), array([-8.0740735 ,  1.18862211])]</span><br><span class="line">      constr_nfev: [1868, 0]</span><br><span class="line">      constr_nhev: [858, 0]</span><br><span class="line">      constr_njev: [857, 0]</span><br><span class="line">   constr_penalty: 1.0</span><br><span class="line"> constr_violation: 0.0</span><br><span class="line">   execution_time: 1.314129114151001</span><br><span class="line">              fun: 0.0712045619561011</span><br><span class="line">             grad: array([ 0.05256429, -0.00795657])</span><br><span class="line">              jac: [array([[ 0.18862211, -9.0740735 ],</span><br><span class="line">      [-1.        , -1.        ]]), array([[1., 0.],</span><br><span class="line">      [0., 1.]])]</span><br><span class="line">  lagrangian_grad: array([ 0.00752376, -0.00072389])</span><br><span class="line">          message: &#39;The maximum number of function evaluations is exceeded.&#39;</span><br><span class="line">           method: &#39;tr_interior_point&#39;</span><br><span class="line">             nfev: 5604</span><br><span class="line">             nhev: 0</span><br><span class="line">              nit: 1000</span><br><span class="line">            niter: 1000</span><br><span class="line">             njev: 1868</span><br><span class="line">       optimality: 0.007523757712003665</span><br><span class="line">           status: 0</span><br><span class="line">          success: False</span><br><span class="line">        tr_radius: 1.0000000000000005e-07</span><br><span class="line">                v: [array([-0.00541521,  0.04195282]), array([-2.06628474e-03,  4.74780159e-05])]</span><br><span class="line">                x: array([-8.0740735 ,  1.18862211])</span><br></pre></td></tr></table></figure>

<p>初步验证一下，这个结果应该是符合预期的。</p>
<h2 id="问题3-连续空间最值问题"><a href="#问题3-连续空间最值问题" class="headerlink" title="问题3: 连续空间最值问题"></a>问题3: 连续空间最值问题</h2><p>$$\begin{equation}\label{eq3}<br>\begin{aligned}<br>max \ f(x) = 200&amp;e^{-0.05x}sin(x)            \\<br>-2 \le &amp;x \le 2<br>\end{aligned}<br>\end{equation}$$</p>
<p>我们先来看一下函数图像，这个结果比较明显.<br><img src="/2020/12/07/optimization_problem/issue3.png" alt="Fig2. 函数图像"><span class="image-caption">Fig2. 函数图像</span></p>
<p>针对这个问题，我们使用如下的程序进行求解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> Bounds</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> SR1</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rosen</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The Rosenbrock function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">200</span> * math.exp(-<span class="number">0.05</span> * x) * math.sin(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot</span>():</span></span><br><span class="line">    x = np.linspace(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line">    y = [rosen(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">    plt.plot(x, y, color=<span class="string">&quot;r&quot;</span>, linestyle=<span class="string">&quot;-&quot;</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>():</span></span><br><span class="line">    bounds = Bounds([-<span class="number">2.0</span>], [<span class="number">2.0</span>])</span><br><span class="line">    x0 = [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    res = minimize(rosen,</span><br><span class="line">                   x0,</span><br><span class="line">                   method=<span class="string">&#x27;trust-constr&#x27;</span>,</span><br><span class="line">                   jac=<span class="string">&quot;2-point&quot;</span>,</span><br><span class="line">                   hess=SR1(),</span><br><span class="line">                   options=&#123;<span class="string">&#x27;verbose&#x27;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">                   bounds=bounds)</span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    plot()</span><br><span class="line">    solve()</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">barrier_parameter: 3.200000000000001e-05</span><br><span class="line">barrier_tolerance: 3.200000000000001e-05</span><br><span class="line">         cg_niter: 9</span><br><span class="line">     cg_stop_cond: 1</span><br><span class="line">           constr: [array([1.52083761])]</span><br><span class="line">      constr_nfev: [0]</span><br><span class="line">      constr_nhev: [0]</span><br><span class="line">      constr_njev: [0]</span><br><span class="line">   constr_penalty: 1.0</span><br><span class="line"> constr_violation: 0.0</span><br><span class="line">   execution_time: 0.08674049377441406</span><br><span class="line">              fun: -185.1242145731396</span><br><span class="line">             grad: array([-5.76906021e-05])</span><br><span class="line">              jac: [&lt;1x1 sparse matrix of type &#39;&lt;class &#39;numpy.float64&#39;&gt;&#39;</span><br><span class="line">       with 1 stored elements in Compressed Sparse Row format&gt;]</span><br><span class="line">  lagrangian_grad: array([7.09417522e-10])</span><br><span class="line">          message: &#39;&#96;gtol&#96; termination condition is satisfied.&#39;</span><br><span class="line">           method: &#39;tr_interior_point&#39;</span><br><span class="line">             nfev: 20</span><br><span class="line">             nhev: 0</span><br><span class="line">              nit: 15</span><br><span class="line">            niter: 15</span><br><span class="line">             njev: 10</span><br><span class="line">       optimality: 7.0941752157368e-10</span><br><span class="line">           status: 1</span><br><span class="line">          success: True</span><br><span class="line">        tr_radius: 24107.414128166944</span><br><span class="line">                v: [array([5.76913115e-05])]</span><br><span class="line">                x: array([1.52083761])</span><br></pre></td></tr></table></figure>
<p>根据图像得知，这个求解结果是正确的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://cloud.tencent.com/developer/article/1099730">https://cloud.tencent.com/developer/article/1099730</a></li>
<li><a href="https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html">https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html</a></li>
</ol>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>随机算法</title>
    <url>/2020/12/03/random_algorithm/</url>
    <content><![CDATA[<h2 id="问题1-拒绝采样"><a href="#问题1-拒绝采样" class="headerlink" title="问题1: 拒绝采样"></a>问题1: 拒绝采样</h2><h3 id="leetcode-470-Implement-Rand10-Using-Rand7"><a href="#leetcode-470-Implement-Rand10-Using-Rand7" class="headerlink" title="leetcode 470: Implement Rand10() Using Rand7()"></a><a href="https://leetcode.com/problems/implement-rand10-using-rand7/">leetcode 470: Implement Rand10() Using Rand7()</a></h3><blockquote>
<p>Given the <strong>API</strong> rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn’t call any other API. Please do not use a language’s built-in random API.</p>
<p>Each test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().</p>
<p>Follow up:<br>What is the expected value for the number of calls to rand7() function?<br>Could you minimize the number of calls to rand7()?</p>
<p>Example 1:<br>Input: n = 1<br>Output: [2]</p>
<p>Example 2:<br>Input: n = 2<br>Output: [2,8]</p>
<p>Example 3:<br>Input: n = 3<br>Output: [3,8,10]</p>
<p>Constraints:<br>1 &lt;= n &lt;= 105</p>
</blockquote>
<p><img src="/2020/12/03/random_algorithm/table.png" alt="Fig 1. 二维随机表格分布"><span class="image-caption">Fig 1. 二维随机表格分布</span></p>
<p>我们可以使用“拒绝采样”来求解这个题目。 注意rand10要求返回的数字在[1, 10]之间均匀分布。执行一次rand7()只能得到[1, 7]之间的均匀分布，我们可以执行两次rand7(), 将两次的执行结果看做表格的横纵坐标(row, col)，这时候表格中的每一个单元被选中的机会是相等的, 这样我们就得到了一个二维表格中的均匀分布。接下来， 我们将这个二维坐标转换为一维坐标，我们就得到了[1, 49]之间的均匀分布。我们的最终目标是得到[1, 10]之间的均匀分布，由于可以把[1, n * 10]之间的均匀分布通过取余预算转换为[1, 10]之间的均匀分布，所以这里我们取[1, 40]为有效值，当获取的值不在这个范围时候，我们重新采样。这个过程即拒绝采样。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> row = rand7();</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> col = rand7();</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> idx = (row - <span class="number">1</span>) * <span class="number">7</span> + col;</span><br><span class="line">      <span class="keyword">if</span> (idx &lt;= <span class="number">40</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> idx % <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> rand10();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="问题2：抽水采样"><a href="#问题2：抽水采样" class="headerlink" title="问题2：抽水采样"></a>问题2：抽水采样</h2><h3 id="leetcode-398-Random-Pick-Index"><a href="#leetcode-398-Random-Pick-Index" class="headerlink" title="leetcode 398: Random Pick Index"></a><a href="https://leetcode.com/problems/random-pick-index/">leetcode 398: Random Pick Index</a></h3><blockquote>
<p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p>
<p>Note:<br>The array size can be very large. Solution that uses too much extra space will not pass the judge.</p>
<p>Example:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Solution solution = <span class="keyword">new</span> Solution(nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pick(3) should return either index 2, 3, or 4 randomly.</span></span><br><span class="line"><span class="comment">// Each index should have equal probability of returning.</span></span><br><span class="line">solution.pick(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pick(1) should return 0. Since in the array only nums[0] is equal to 1.</span></span><br><span class="line">solution.pick(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>我们可以使用“<a href="https://zh.wikipedia.org/wiki/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A8%A3">抽水采样</a>”来求解这个题目。我们先给出代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Solution(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums): data(nums) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pick</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[i] == target) &#123;</span><br><span class="line">                ++num;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">int</span> r = rand() % num; <span class="comment">// value in [0, num - 1]</span></span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    res = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>下面是一个具体分析：</p>
<ol>
<li>如果target只出现了1次，那么<code>rand() % num</code>等于0，这个index一定会被返回；</li>
<li>如果target出现了2次，第一个index被选中的概率是：<code>100% * 50% = 50%</code>；第二个index被选中的概率是<code>50%</code>，它们是被均匀采样的；</li>
<li>如果target出现了3次，那么它的3个index被返回的概率分别是：<ul>
<li><code>100% * (1 - 50%) * (1 - 33.33%) = 33.33%</code>，第一步被选中，第二步和第三步没有被换掉；</li>
<li><code>50% * (1 - 33.33%) = 33.33%</code>，第二步被选中，第三步没有被换掉；</li>
<li><code>33.33%</code>，第三步被选中；</li>
</ul>
</li>
</ol>
<p>以此类推，可以保证每个index被选中的概率是相等的。</p>
<h2 id="问题3-C-获取随机数"><a href="#问题3-C-获取随机数" class="headerlink" title="问题3: C++获取随机数"></a>问题3: C++获取随机数</h2><h3 id="rand"><a href="#rand" class="headerlink" title="rand()"></a><a href="https://en.cppreference.com/w/cpp/numeric/random/rand">rand()</a></h3><p>Returns a pseudo-random integral value between 0 and RAND_MAX. And 0 and RAND_MAX included.</p>
<h3 id="uniform-int-distribution"><a href="#uniform-int-distribution" class="headerlink" title="uniform_int_distribution"></a><a href="https://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution">uniform_int_distribution</a></h3><p>Produces random integer values i, uniformly distributed on the closed interval [a, b].</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Will be used to obtain a seed for the random number engine.</span></span><br><span class="line">  <span class="built_in">std</span>::random_device rd;</span><br><span class="line">  <span class="comment">// Standard mersenne_twister_engine seeded with rd().</span></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::mt19937 <span class="title">gen</span><span class="params">(rd())</span></span>;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::uniform_int_distribution&lt;&gt; <span class="title">distrib</span><span class="params">(<span class="number">1</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; distrib(gen) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>random</tag>
      </tags>
  </entry>
</search>
